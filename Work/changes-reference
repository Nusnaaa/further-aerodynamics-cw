Conversions
inch2m = 1/39.37;
bar2Pa = 100000;
mbar2Pa = 100;
degC2K = 273.15;
Task 1.1: Theoretical Mach number variation along working section 
Interpolating the wind tunnel liner dimensions
Interpolation is necessary to align the points on both sections of the aerofoil. Later calculations will require consistent, matching point numbering. The values will also be converted to SI units from Imperial units.
topSurface_inches = readtable("Work\aerofoil-surface-dimensions.xlsx","Sheet","Top Surface")
bottomSurface_inches = readtable("Work\aerofoil-surface-dimensions.xlsx",Sheet="Bottom Surface")

topSurfaceArray_inches = table2array(topSurface_inches);
bottomSurfaceArray_inches = table2array(bottomSurface_inches);

% Inerpolating the bottom surface's y-coordinate points relative to the top surface's x-coordinates.
bottom_interp = interp1(bottomSurfaceArray_inches(:,1),bottomSurfaceArray_inches(:,2),topSurfaceArray_inches(:,1),"linear");

% Assembling the completed array, in inches
bottomSurfaceInterp_inches = [topSurfaceArray_inches(:,1) bottom_interp];

% Converting all matrices to S.I. units
bottomSurface = bottomSurfaceInterp_inches*inch2m;
topSurface = topSurfaceArray_inches*inch2m;

% Creating tables
bottomSurafce_table = array2table(bottomSurface);
bottomSurafce_table.Properties.VariableNames = {'x_metres' 'y_metres'};
topSurface_table = array2table(topSurface);
topSurface_table.Properties.VariableNames = {'x_metres' 'y_metres'};
bottomSurafce_table
topSurface_table
Plotting the Coordinates
Before plotting, the values must be corrected to show how they vary along the section. To do this, the centre of the wind tunnel(3 inches of its diameter) will be used as a reference point. The coordinates will then be added or subtracted to the constant 3, in order to show how the section varies. See the plot below for a better understanding of what this means.
% Finding the coordiantes of the top and bottom liners relative to the
% centre of the wind tunnel
bottomSurfacre_ycoord_relative = -3*inch2m + bottomSurface(:,2);
topSurface_ycoord_relative = 3*inch2m - topSurface(:,2);

bottomSurface_relative = [bottomSurface(:,1) bottomSurfacre_ycoord_relative]
topSurface_relative = [topSurface(:,1) topSurface_ycoord_relative]

plot(bottomSurface_relative(:,1),bottomSurface_relative(:,2))
hold on
plot(topSurface_relative(:,1),topSurface_relative(:,2))
legend("Bottom Surface", "Top Surface")
xlabel("Liner x-coordinates (m)")
ylabel("Liner y-coordinates (m)")
yline(3*inch2m)
yline(-3*inch2m)
xlim([0 max(topSurface_relative(:,1))])
hold off
Plotting the variation of the Mach number
To accomplish this, the ratio of the local area to the area at the throat is needed. This ratio shows how the mach number varies through the wind tunnel, as pressure, area and velocity(and by extension mach number) are all related. As pressure increases due to a decrease in area, the velocity of the free stream air must also decrease. With this in mind, we can assume that the velocity - and therefore mach number - is at its lowest when at the throat, and at its highest elsewhere. We can then use this assumption and set the throat as a refenrence point to see how much larger the mach number will be in sections of the wind tunnel with larger areas. In theory, the mach number should not be lower than one, as that would suggest that the throat does not have the smallest area. The  
throatRadius = ( min(topSurface_relative(:,2)) - max(bottomSurface_relative(:,2)) )/2;
throatArea = pi*throatRadius^2

localRadius = ( topSurface_relative(:,2) - bottomSurface_relative(:,2) )./2;
localArea = pi*localRadius.^2

areaRatio = localArea/throatArea;
gamma = 1.4;

% this loop calculates the subsonic theoretical mach numbers of the wind
% tunnel using the newton raphson method
for j = 1:length(areaRatio) % the throat where mach =1  is at position 19
    M(1) = 0.2; % Initial subsonic mach number guess 
    Astar=areaRatio(j);
    for i = 1:1000
        f(i) = Astar.*M(i) - ( ( 1 + ( (gamma - 1)/2 ).*(M(i))^2 )/( (gamma + 1)/2 ) )^( (gamma + 1)/(2*(gamma - 1)) );
        df(i) = Astar - M(i).*( ( 1 + ((gamma - 1)/2).*(M(i))^2 )/( (gamma+1)/2 ) )^( ( (gamma + 1)/(2*(gamma - 1)) )- 1 );
        M_new(j) = M(i) - f(i)./df(i); % Calcuates the new mach number 
        if abs(M_new-M(i)) < 1e-20 % compares the difference in mach number to a specified tolerance 
            break 
        end  
           i=i+1;
           M(i) = M_new(j); % Makes the new mach number the starting point for the next interation 
    end
    j=j+1;
end

% this loop calculates the supersonic theoretical mach numbers of the wind
% tunnel using the newton raphson method
for j = 1:length(areaRatio) % the throat where mach =1  at position 19
    M_super(1) = 1.8; % Initial guess for supersonic mach number 
    Astar=areaRatio(j);
    for i = 1:1000
        f(i) = Astar.*M_super(i) - ( ( 1 + ( (gamma - 1)/2 ).*(M_super(i))^2 )/( (gamma + 1)/2 ) )^( (gamma + 1)/(2*(gamma - 1)) );
        df(i) = Astar - M_super(i).*( ( 1 + ((gamma - 1)/2).*(M_super(i))^2 )/( (gamma+1)/2 ) )^( ( (gamma + 1)/(2*(gamma - 1)) )- 1 );
        M_new_super(j) = M_super(i) - f(i)./df(i); % Calcuates the new mach number 
        if abs(M_new_super-M_super(i)) < 1e-20 % compares the difference in mach number to a specified tolerance 
            break 
        end  
           i=i+1;
           M_super(i) = M_new_super(j); % Makes the new mach number the starting point for the next interation 
    end
    j=j+1;
end

plot(bottomSurface(:,1),M_new)                  % Plotting the subsonic(low mach) numbers
hold on
plot(bottomSurface(3:19,1),M_new_super(3:19),'r--')                         % Plotting the supersonic(high mach) numbers before it intersects with the low mach plot
plot(bottomSurface(19:end,1),M_new_super(19:end),'r-')                      % Plotting the supersonic(high mach) numbers after it intersects with the low mach plot
xline(bottomSurface(19,1),'k--')
xlabel("Distance along working section(m)")
ylabel("Theoretical Mach Number")
title('Mach Number Variation across Wind Tunnel Length')
legend('Low Mach Assumption', 'Theoretical High Mach Assumption', 'High Mach Assumption', 'Throat position = 0.1730')
grid on
grid minor
hold off

% Assembling a table of the supersonic mach numbers against the distance along the working section
distances = (bottomSurface(:,1));
mach_distance_relationship_arr = [distances M_new_super'];
mach_distance_relationship = array2table(mach_distance_relationship_arr)

Calculating and plotting temperature and pressure ratios as they vary across the wind tunnel's length

% For the high mach assumption
highMachPressureRatio = ( 1 + ( (gamma-1)/2 ).*M_new_super.^2 ).^( gamma/(gamma - 1) )
highMachTemperatureRatio = 1 + ( (gamma-1)/2 ).*M_new_super.^2

% For the low mach assumption
lowMachPressureRatio = ( 1 + ( (gamma-1)/2 ).*M_new.^2 ).^( gamma/(gamma - 1) )
lowMachTemperatureRatio = 1 + ( (gamma-1)/2 ).*M_new.^2

% Plotting the Tempreature Ratio Variation
plot(bottomSurface(:,1),lowMachTemperatureRatio)                  % Plotting the subsonic(low mach) numbers' tempreature ratios
hold on
grid on
grid minor
plot(bottomSurface(3:19,1),highMachTemperatureRatio(3:19),'r--')                         % Plotting the supersonic(high mach) numbers' tempreature ratios before it intersects with the low mach plot
plot(bottomSurface(19:end,1),highMachTemperatureRatio(19:end),'r-')                      % Plotting the supersonic(high mach) numbers' tempreature ratios after it intersects with the low mach plot
xline(bottomSurface(19,1),'k--')
xlabel("Distance along working section(m)")
ylabel("Temperature(deg C)")
title('Temperature Ratio Variation across Wind Tunnel Length')
legend('Low Mach Assumption', 'Theoretical High Mach Assumption', 'High Mach Assumption','Throat position = 0.1730')
hold off

% PLotting the Pressure Ratio Variation
plot(bottomSurface(:,1),lowMachPressureRatio)                  % Plotting the subsonic(low mach) numbers' pressure ratios
hold on
grid on
grid minor
plot(bottomSurface(3:19,1),highMachPressureRatio(3:19),'r--')                         % Plotting the supersonic(high mach) numbers' pressure ratios before it intersects with the low mach plot
plot(bottomSurface(19:end,1),highMachPressureRatio(19:end),'r-')                      % Plotting the supersonic(high mach) numbers' pressure ratios after it intersects with the low mach plot
xline(bottomSurface(19,1),'k--')
xlabel("Distance along working section(m)")
ylabel("Pressure (Pa)")
title('Pressure Ratio Variation across Wind Tunnel Length')
legend('Low Mach Assumption', 'Theoretical High Mach Assumption', 'High Mach Assumption','Throat position = 0.1730')
hold off

Task 1.2: WT measured pressure ratio and Mach number along working section at two test conditions
The wind tunnel is run at 2 different pressures - 150psi and 75psi- these are the 2 conditions under which the working section is tested. 
Preparing the raw data
The provided data has been given in text format and cannot easily be converted to a readable spreadsheet. To achieve a usable tabular format, the data will need to be split into individual elements and the reassembeled into a usable table/array. The following will be my attempt at accomplishing this using the knowledge from py4e.
% Loading the data into MATLAB
supersonic150_psi = readlines("Work\WT Data for Further Aerodynamics cw\Supersonic Data\Data\supersonic150Psi.txt");
supersonic75_psi = readlines("Work\WT Data for Further Aerodynamics cw\Supersonic Data\Data\supersonick75Psi.txt");
supersonicUncertaintity = readlines("Work\WT Data for Further Aerodynamics cw\Supersonic Data\Data\Uncertainty.txt")
p_atm = 98910;
%% Supersonic data at 150 psi

    % Creating an array to store the number of elements needed to iterate
    % through the data
    x = 1:numel(supersonic150_psi);
    
    % Defining the new array to be assembled
    supersonic150_PSI = zeros(1,28);
    
    % Removing empty cells
    for i = x
        line = supersonic150_psi(i);                    % store each cell as a separate line of text
        if line.startsWith("        data [Bar] ")       % check if the line starts with desired data
            line.strip("left");                         % remove undesired left spacing
            arr = strsplit(line);                       % split the strings
            arr(1) = [];                                % remove the empty cell on at start of line
            arr(1) = [];
            arr(1) = "Pressure";
            str2double( arr(2:end) );
            supersonic150_PSI = vertcat(supersonic150_PSI,arr);             % concatenate with main array
        elseif line.startsWith("data [Bar]")
            arr = strsplit(line);
            arr(1) = [];
            arr(1) = "Pressure";
            str2double( arr(2:end) );
            supersonic150_PSI = vertcat(supersonic150_PSI,arr);
        elseif line.startsWith("Pressure")                                  % generating the header names
            columnNames = strsplit(line,{':',' '},CollapseDelimiters=true);
            columnNames(1) = [];
            columnNames(1) = [];
            columnNames(1) = "Pressure Tap Number";
        end
    end
    
    supersonic150_PSI_tab = array2table(supersonic150_PSI);
    supersonic150_PSI_tab(1,:) = [];
    
    supersonic150_PSI_tab.Properties.VariableNames = columnNames;

%% Supersonic data at 75 psi


    % Creating an array to store the number of elements needed to iterate
    % through the data
    x = 1:numel(supersonic75_psi);
    
    % Defining the new array to be assembled
    supersonic75_PSI = zeros(1,28);
    
    % Removing empty cells
    for i = x
        line = supersonic75_psi(i);                    % store each cell as a separate line of text
        if line.startsWith("        data [Bar] ")       % check if the line starts with desired data
            line.strip("left");                         % remove undesired left spacing
            arr = strsplit(line);                       % split the strings
            arr(1) = [];                                % remove the empty cell on at start of line
            arr(1) = [];
            arr(1) = "Pressure";
            str2double( arr(2:end) );             % converting the pressures from bar to Pa
            supersonic75_PSI = vertcat(supersonic75_PSI,arr);             % concatenate with main array
        elseif line.startsWith("data [Bar]")
            arr = strsplit(line);
            arr(1) = [];
            arr(1) = "Pressure";
            str2double( arr(2:end) );
            supersonic75_PSI = vertcat(supersonic75_PSI,arr);
        elseif line.startsWith("Pressure")                                  % generating the header names
            columnNames = strsplit(line,{':',' '},CollapseDelimiters=true);
            columnNames(1) = [];
            columnNames(1) = [];
            columnNames(1) = "Pressure Tap Number";
        end
    end
    
    supersonic75_PSI_tab = array2table(supersonic75_PSI);
    supersonic75_PSI_tab(1,:) = [];
    
    supersonic75_PSI_tab.Properties.VariableNames = columnNames;

%% Converting from bar to Pa

    supersonic75_PSI_array = str2double( table2array( supersonic75_PSI_tab(:,2:end-1) ) );
    supersonic75_PSI_pascals_array = p_atm + supersonic75_PSI_array(:,2:26).*bar2Pa + 269;              % Absolute pressure at 75 psi working condition
    supersonic75_PSI_ave = mean(supersonic75_PSI_pascals_array);

    supersonic150_PSI_array = str2double( table2array( supersonic150_PSI_tab(:,2:end-1) ) );
    supersonic150_PSI_pascals_array = p_atm + supersonic150_PSI_array*bar2Pa + 269;                     % Absolute pressure at 150 psi working condition
    supersonic150_PSI_ave = mean(supersonic150_PSI_pascals_array);

    % Assembling tables of the converted values
    supersonic150_PSI_pascals_tab = [supersonic150_PSI_tab(:,1)];
    supersonic150_PSI_pascals_tab = horzcat( supersonic150_PSI_pascals_tab,array2table(supersonic150_PSI_pascals_array) );
    % supersonic150_PSI_pascals_tab.Properties.VariableNames = columnNames

    supersonic75_PSI_pascals_tab = [supersonic75_PSI_tab(:,1)];
    supersonic75_PSI_pascals_tab = horzcat( supersonic75_PSI_pascals_tab,array2table(supersonic75_PSI_pascals_array) );
    % supersonic75_PSI_pascals_tab.Properties.VariableNames = columnNames

%% Finding the pressure ratios (P_0/P)
% For the 150psi working condition
pressureRatio_150_plot = [ supersonic150_PSI_ave(:,1)./supersonic150_PSI_ave(:,1) supersonic150_PSI_ave(:,1)./supersonic150_PSI_ave(:,2:25) ];
windTunnelLength = linspace(0,bottomSurface(end,1),numel(pressureRatio_150_plot))                                                                                             % the pressure tap numbers
plot(windTunnelLength,pressureRatio_150_plot')
hold on
grid on
grid minor
title('Experimental Pressure Ratios Along Working Section')
xline(bottomSurface(19,1),'k--')



% % For the 75psi working condition
pressureRatio_75_plot = [ supersonic75_PSI_ave(:,1)./supersonic75_PSI_ave(:,1) supersonic75_PSI_ave(:,1)./supersonic75_PSI_ave(:,2:25) ];
plot(windTunnelLength,pressureRatio_75_plot')
grid on
grid minor
legend('Pressure Ratio along Working Section. Working condition: 150psi','Pressure Ratio along Working Section. Working condition: 75psi','Throat position = 0.1730')
hold off


Finding the mach numbers using the presure ratios


% For the 150psi working condition
mach_150_plot = sqrt( abs( 2*( (pressureRatio_150_plot).^( (gamma - 1)/gamma ) - 1 )/(gamma-1) ) )

% For the 75psi working condition
mach_75_plot = sqrt( 2*( (pressureRatio_75_plot).^( (gamma - 1)/gamma ) - 1 )/(gamma-1) )

% Plotting the mach numbers
plot(windTunnelLength,mach_75_plot)
hold on
grid on
grid minor
title("Experimental Mach Number Variation")
xline(bottomSurface(19,1),'k--')


plot(windTunnelLength,mach_150_plot)
grid on
grid minor
legend("Calculated Mach Number. Working condition: 75psi","Calculated Mach Number. Working condition: 150psi",'Throat position = 0.1730')
hold off

Finding the temperature ratios using pressure ratios

temperarureRatio_75 = 1 + ( (gamma-1)/2 ).* mach_75_plot.^2;
temperarureRatio_150 = 1 + ( (gamma-1)/2 ).* mach_150_plot(1:25).^2;

% Plotting the tempreature ratios
plot(windTunnelLength,temperarureRatio_75)
hold on
grid on
grid minor
title("Experimental Temperature Ratios")
xline(bottomSurface(19,1),'k--')

plot(windTunnelLength,temperarureRatio_150)
grid minor
legend("Calculated Temperature Ratio. Working condition: 75psi","Calculated Temperature Ratio. Working condition: 150psi",'Throat position = 0.1730')
hold off

Task 1.3: Theoretical Mach number at different regimes, shock and expansion fan angles compared with WT measurements
Theoretical Mach Numbers
To find the theoretical mach number, the Newton-Raphson method will be used. Following the guidance provided on blackboard, the area ratio and a relationship derived from that formula can be used to 'predict' the mach number
Finding M1
I will assume that the centre of the wedge is at the centre of the working section. From this, the x-coordiante of the wedge LE can be found and the theoretical mach number at this point(if there was no wedge inside the working section) can be calculated. This value is M1
wedgeSpan = 25.3;                       % the length of the wedge in [mm]
wedgeThickness = 2.22;                  % the thickness of the wedge measured from the bottommost point to the topmost point
workSectionDistance = 19;               % distance of the working section's centre from the inlet of the wind tunnel. In [in.]

wedgeLE = (workSectionDistance*inch2m) - (wedgeSpan*10^-3)/2;           % the x-coordinate along the wind tunnel for the wedge L.E.

mach_distance_relationship;

% Finding M1 at the wedge L.E using "mach_distance_relationship"
M1 = interp1(mach_distance_relationship_arr(:,1),mach_distance_relationship_arr(:,2),wedgeLE,"linear")

% Finding M2
firstNormalAngle = atand((wedgeThickness/2)/(wedgeSpan/2));
firstObliqueShockAngle = 40;                                                         % Measured from image
M_n1 = M1*sind(firstObliqueShockAngle)
M_n2_squared = sqrt(( (gamma - 1)*M_n1^2 + 2 )/( 2.*gamma*M_n1.^2 - (gamma - 1) ) );
M2 = ( sqrt(M_n2_squared) )/( sind(firstObliqueShockAngle - firstNormalAngle) )

% Finding M3 using Prandtl-Meyer
prandtlM2 = sqrt( (gamma + 1)/(gamma - 1) )*atand( sqrt( ( (gamma - 1)/(gamma + 1) )*(M2^2 - 1) ) ) - atand( sqrt(M2^2 - 1) );
prandtlM3 = 2*firstNormalAngle + prandtlM2;
M3 = 1.445                                                       % Read from table using prandtlM3 value

% Finding M4
theta = (12.79 - 10.3)/2;                       % read from prandtl-meyer function table. 
secondObliqueShockAngle = 36;
M_n3 = M3*sind(secondObliqueShockAngle)
M_n3_squared = sqrt(( (gamma - 1)*M_n3^2 + 2 )/( 2.*gamma*M_n3.^2 - (gamma - 1) ) );
M4 = ( sqrt(M_n3_squared) )/( sind(firstObliqueShockAngle - firstNormalAngle) )
Plotting the flow over the wedge
plot([0 40],[10 10],'k--')                            % A horizontal line
hold on
% Plotting the wedge shape
plot([5 5+wedgeSpan/2 5+wedgeSpan],[10 10+wedgeThickness 10],'k-')                      % Upper Surface
plot([5 5+wedgeSpan/2 5+wedgeSpan],[10 10-wedgeThickness 10],'k-')                      % Lower Surface
ylim([0 20])

% Plotting the oblique shocks due to M1's deflection
M1_x_dist = M1;                                                                      % I decided that the visual representation of the shock formed after M1 makes contact with the wedge will end after 5 horizontal units along the plotted wedge. This distance will be used to find the vertical unit distance usig the oblique shock angle
M1_y_dist = M1_x_dist*tand(firstObliqueShockAngle);
plot([5 5+M1_x_dist],[10 10+M1_y_dist],'r-')
plot([5 5+M1_x_dist],[10 10-M1_y_dist],'r-')

% Plotting the expansion fan(s) at the transition from M2 to M3
% Wedge top surface
expansion_x_1 = 2;
expansion_x_2 = 3;

expansion_y_1 = 2;
expansion_y_2 = 1.85;

plot([5+0.5*wedgeSpan 5+0.5*wedgeSpan+expansion_x_1],[10+wedgeThickness 10+wedgeThickness+expansion_y_1],'k--')
plot([5+0.5*wedgeSpan 5+0.5*wedgeSpan+expansion_x_2],[10+wedgeThickness 10+wedgeThickness+expansion_y_2],'k--')


% Wedge bottom surface
plot([5+0.5*wedgeSpan 5+0.5*wedgeSpan+expansion_x_1],[10-wedgeThickness 10-wedgeThickness-expansion_y_1],'k--')
plot([5+0.5*wedgeSpan 5+0.5*wedgeSpan+expansion_x_2],[10-wedgeThickness 10-wedgeThickness-expansion_y_2],'k--')


% Plotting the shock at the end of the wedge
M4_x_dist =M4;
M4_y_dist = M4_x_dist*tand(secondObliqueShockAngle);
plot([5+wedgeSpan 5+wedgeSpan+M1_x_dist],[10 10+M4_y_dist],'m-')
plot([5+wedgeSpan 5+wedgeSpan+M1_x_dist],[10 10-M4_y_dist],'m-')
grid on
grid minor
hold off
Experimental Mach Numbers
The core method here is the same as the moethod used to find the theoretical ach numbers. The only difference is that the data set used to interpolate the mach numbers has changed from the calculated values in task 1.1 to the values from task 1.2 where the experimental pressure rations were used to calulate the mach numbers
% Finding M1 using the experimental mach numbers data set
mach_distance_relationship_experimental_arr = [windTunnelLength' mach_150_plot'];
mach_distance_relationship_experimental = array2table(mach_distance_relationship_arr);
M1_experiment = interp1(mach_distance_relationship_experimental_arr(:,1),mach_distance_relationship_experimental_arr(:,2),wedgeLE,"linear")

% Finding M2
firstObliqueShockAngle_experiment = 41;                                                         % Read from 'Oblique Shock Angle Chart (NACA Report 1135)'. Using M1 value
M_n1 = M1*sind(firstObliqueShockAngle_experiment)
M_n2_squared_experimental = sqrt(( (gamma - 1)*M_n1^2 + 2 )/( 2.*gamma*M_n1.^2 - (gamma - 1) ) );
M2_experiment = ( sqrt(M_n2_squared_experimental) )/( sind(firstObliqueShockAngle_experiment - firstNormalAngle) )

% Finding M3 using Prandtl-Meyer
prandtlM2_experiment = sqrt( (gamma + 1)/(gamma - 1) )*atand( sqrt( ( (gamma - 1)/(gamma + 1) )*(M2^2 - 1) ) ) - atand( sqrt(M2^2 - 1) );
prandtlM3_experiment = 2*firstNormalAngle + prandtlM2_experiment;
M3_experiment = 1.785                                                       % Read from table using prandtlM3_experiment value

% Finding M4
secondObliqueShockAngle_experiment = 38;                            % Read from 'Oblique Shock Angle Chart (NACA Report 1135)'. Using M3 value
M_n3_experiment = M3_experiment*sind(secondObliqueShockAngle_experiment)
M_n3_squared_experiment = sqrt(( (gamma - 1)*M_n3_experiment^2 + 2 )/( 2.*gamma*M_n3_experiment.^2 - (gamma - 1) ) );
M4_experiment = ( sqrt(M_n3_squared_experiment) )/( sind(firstObliqueShockAngle_experiment - firstNormalAngle) )
Plotting the flow over the wedge
plot([0 40],[10 10],'k--')                            % A horizontal line
hold on
% Plotting the wedge shape
plot([5 5+wedgeSpan/2 5+wedgeSpan],[10 10+wedgeThickness 10],'k-')                      % Upper Surface
plot([5 5+wedgeSpan/2 5+wedgeSpan],[10 10-wedgeThickness 10],'k-')                      % Lower Surface
ylim([0 20])

% Plotting the oblique shocks due to M1's deflection
M1_x_dist = M1_experiment;                                                                      % I decided that the visual representation of the shock formed after M1 makes contact with the wedge will end after 5 horizontal units along the plotted wedge. This distance will be used to find the vertical unit distance usig the oblique shock angle
M1_y_dist = M1_x_dist*tand(firstObliqueShockAngle_experiment);
plot([5 5+M1_x_dist],[10 10+M1_y_dist],'r-')
plot([5 5+M1_x_dist],[10 10-M1_y_dist],'r-')

% Plotting the expansion fan(s) at the transition from M2 to M3
% Wedge top surface
expansion_x_1 = 2;
expansion_x_2 = 3;

expansion_y_1 = 2;
expansion_y_2 = 1.85;

plot([5+0.5*wedgeSpan 5+0.5*wedgeSpan+expansion_x_1],[10+wedgeThickness 10+wedgeThickness+expansion_y_1],'k--')
plot([5+0.5*wedgeSpan 5+0.5*wedgeSpan+expansion_x_2],[10+wedgeThickness 10+wedgeThickness+expansion_y_2],'k--')

% Wedge bottom surface
plot([5+0.5*wedgeSpan 5+0.5*wedgeSpan+expansion_x_1],[10-wedgeThickness 10-wedgeThickness-expansion_y_1],'k--')
plot([5+0.5*wedgeSpan 5+0.5*wedgeSpan+expansion_x_2],[10-wedgeThickness 10-wedgeThickness-expansion_y_2],'k--')

% Plotting the shock at the end of the wedge
M4_x_dist = M4_experiment;
M4_y_dist = M4_x_dist*tand(secondObliqueShockAngle_experiment);
plot([5+wedgeSpan 5+wedgeSpan+M1_x_dist],[10 10+M4_y_dist],'m-')
plot([5+wedgeSpan 5+wedgeSpan+M1_x_dist],[10 10-M4_y_dist],'m-')
grid on
grid minor
hold off
Task 1.4 Comparison of theory and WT measurements along working section (Mach  number, pressure ratio, temperature ratio)
Mach Number Comparison
% For the theoretical mach numbers
plot(bottomSurface(:,1),M_new)                  % Plotting the subsonic(low mach) numbers
hold on
plot(bottomSurface(3:19,1),M_new_super(3:19),'r--')                         % Plotting the supersonic(high mach) numbers before it intersects with the low mach plot
plot(bottomSurface(19:end,1),M_new_super(19:end),'r-')                      % Plotting the supersonic(high mach) numbers after it intersects with the low mach plot
xline(bottomSurface(19,1),'k--')

% For the experimental mach numbers
plot(windTunnelLength,mach_150_plot)                          % 150psi condition
plot(windTunnelLength,mach_75_plot)                            % 75psi condition

xlabel("Distance along working section(m)")
ylabel("Mach Number")
title('Comparison of Mach Number Variation across Wind Tunnel Length')
legend('Low Mach Assumption', 'Theoretical High Mach Assumption', 'High Mach Assumption', 'Throat position = 0.1730', 'Experimental Mach, 150psi condition', 'Experimental Mach, 75psi condition')
grid on
grid minor
hold off
Pressure Ratio Comparison
% For the theoretical pressure ratios
plot(bottomSurface(:,1),lowMachPressureRatio)                  % Plotting the subsonic(low mach) numbers' pressure ratios
hold on
plot(bottomSurface(3:19,1),highMachPressureRatio(3:19),'r--')                         % Plotting the supersonic(high mach) numbers' pressure ratios before it intersects with the low mach plot
plot(bottomSurface(19:end,1),highMachPressureRatio(19:end),'r-')                      % Plotting the supersonic(high mach) numbers' pressure ratios after it intersects with the low mach plot


% For the experimental pressure ratios
plot(windTunnelLength,pressureRatio_150_plot')
plot(windTunnelLength,pressureRatio_75_plot')

grid on
grid minor
xlabel("Distance along working section(m)")
ylabel("Pressure (Pa)")
title('Pressure Ratio Variation across Wind Tunnel Length')
legend('Low Mach Assumption', 'Theoretical High Mach Assumption', 'High Mach Assumption(Theory)', 'Experimental Pressure Ratio, 150psi condition', 'Experimental Pressure Ratio, 75psi condition')
hold off
Temperature Ratio Comaprison
% For the theoretical temperature ratios
plot(bottomSurface(:,1),lowMachTemperatureRatio)                  % Plotting the subsonic(low mach) numbers' tempreature ratios
hold on
plot(bottomSurface(3:19,1),highMachTemperatureRatio(3:19),'r--')                         % Plotting the supersonic(high mach) numbers' tempreature ratios before it intersects with the low mach plot
plot(bottomSurface(19:end,1),highMachTemperatureRatio(19:end),'r-')                      % Plotting the supersonic(high mach) numbers' tempreature ratios after it intersects with the low mach plot

% For the experimental temperature ratios
plot(windTunnelLength,temperarureRatio_150)
plot(windTunnelLength,temperarureRatio_75)

grid on
grid minor
xlabel("Distance along working section(m)")
ylabel("Temperature(deg C)")
title('Temperature Ratio Variation across Wind Tunnel Length')
legend('Low Mach Assumption', 'Theoretical High Mach Assumption', 'High Mach Assumption', 'Temperature Ratio, 150psi condition', 'Temperature Ratio, 75psi condition')
hold off
Task1.5: Uncertainty analysis of Mach number (M) and pressure ratio (Po/P)

uncertaintity_P_s = 50;
uncertaintity_P_t = 5;
P_t = p_atm;
P_s_75 = supersonic75_PSI_ave;
P_s_150 = supersonic150_PSI_ave(2:end);

% For Change in Mach to change in P_s
delta_mach_to_delta_Ps_75_PSI = ( (-sqrt(5)*P_t)./( (7*P_s_75.^2).*sqrt( (P_t./P_s_75).^(2/7) - 1 ).*(P_t./P_s_75).^(5/7) ) );                     % For the 75 psi working condition
delta_mach_to_delta_Ps_150_PSI = ( (-sqrt(5)*P_t)./( (7.*P_s_150.^2).*sqrt( (P_t./P_s_150).^(2/7) - 1 ).*(P_t./P_s_150).^(5/7) ) );                     % For the 150 psi working condition


% For Change in Mach to change in P_t
delta_mach_to_delta_Pt_75_PSI = ( (sqrt(5))./( (7*P_s_75.^2).*sqrt( (P_t./P_s_75).^(2/7) - 1 ).*(P_t./P_s_75).^(5/7) ) )                     % For the 75 psi working condition
delta_mach_to_delta_Pt_150_PSI = ( (sqrt(5))./( (7*P_s_150).*sqrt( (P_t./P_s_150).^(2/7) - 1 ).*(P_t./P_s_150).^(5/7) ) )                     % For the 150 psi working condition
% Finding the change in Mach
deltaMach_75_PSI = sqrt( (delta_mach_to_delta_Ps_75_PSI.*uncertaintity_P_s).^2 + (delta_mach_to_delta_Pt_75_PSI.*uncertaintity_P_t).^2 )
deltaMach_150_PSI = sqrt( (delta_mach_to_delta_Ps_150_PSI.*uncertaintity_P_s).^2 + (delta_mach_to_delta_Pt_150_PSI.*uncertaintity_P_t).^2 )
% Assembling a table of both uncertaintities
mach_uncertaintities_arr = [deltaMach_75_PSI' deltaMach_150_PSI'];
mach_uncertaintities_tab = array2table(mach_uncertaintities_arr)
mach_uncertaintities_tab.Properties.VariableNames = ["75 PSI" "150 PSI"]
uncertaintity_mach_75_ave = mean(deltaMach_75_PSI)
uncertaintity_mach_150_ave = mean(deltaMach_150_PSI)
% Finding the pressure ratio uncertaintities
delta_Pt_to_Ps_75 = sqrt((( uncertaintity_P_t./ P_s_75).^2 )+(-(P_t.*uncertaintity_P_s)./(P_s_75.^2)).^2);


delta_Pt_to_Ps_150 = sqrt((( uncertaintity_P_t./ P_s_150).^2 )+(-(P_t.*uncertaintity_P_s)./(P_s_150.^2)).^2);


pressure_uncertaintities_arr = [delta_Pt_to_Ps_75' delta_Pt_to_Ps_150'];
pressure_uncertaintities_tab = array2table(pressure_uncertaintities_arr);
pressure_uncertaintities_tab.Properties.VariableNames = ["75 PSI" "150 PSI"]
Task 2.1  WT pressure measurements and resultant velocity profiles at measurement  location, drag calculation using momentum equation, drag coefficient and compare  with measured data
Extracting Excel data
distances = [20 40 60 80 100 110 120 125 130 135 140 145 150 155 160 165 170 175 180 190 200 220 240 260 280];                              % in [mm]
atmosphericPressure = 1006;                 % in mbar
atmosphericPressure_pascals = atmosphericPressure*mbar2Pa;              % atmospheric pressure in Pa
AoA = 2.5;                                  % in deg
ambientTemp = 23.3;                         % in deg C
nominalTunnelSpeed = 25;                    % in m/s

run1_speed = 25;            % m/s
run3_speed = 24.7;          % m/s
run2_speed = 26.6;          % m/s
run_1_dynamicPress = [330
375
387
396
397

404
407
409
416
407
415
425
433
429
433
432
424
427
430
409
413
382
428
422
];
run1_distances = [20
40
60
80
100

120
125
130
135
140
145
150
155
160
165
170
175
180
190
200
220
240
260
280
];                                      % in [mm]
run1_section_temp = 23.3;               %deg C

run2_section_temp = [23.4 23.4 23.4 23.4 23.3*ones(1,21)]
run2_dynamicPress = [407
400
402
391
374
399
393
404
399
403
405
394
399
409
396
403
394
395
400
400
399
409
416
417
375
];

run_3_dynamicPress = [367
373
370
350
363
368
370
369
363
370
373
371
366
370
369
370
376
374
365
379
382
381
379
381
388
];

run_3_section_temp = [23.5*ones(1,16) 23.4*ones(1,9)];

Calculating Drag and Coefficient of drag for each run
After doing this, I will average the results for final reporting, as all 3 runs use the same AoA

R = 287.058;                            % gas constant
ambientTempreature = ambientTemp + degC2K;                      % ambient temperature in K

airDensity_tunnel = atmosphericPressure_pascals/(R*ambientTempreature)                  % density of the air within the wind tunnel
rho_air = 1.225;                            % in kg/m^3. Standard air density. ISA conditions @ MSL
AoA_0_deg = readtable("Work\WT Data for Further Aerodynamics cw\Subsonic Data\Sub_AoA_0.xlsx","UseExcel",true,"Range","A7:G38")
dx = table2array( AoA_0_deg(:,"dx") );
q = table2array( AoA_0_deg(:,"q") );
q1 = table2array( AoA_0_deg(:,"q_1") );
q2 = table2array( AoA_0_deg(:,"q_2") );
q3 = table2array( AoA_0_deg(:,"q_3") );
q4 = table2array( AoA_0_deg(:,"q_4") );
q5 = table2array( AoA_0_deg(:,"q_5") );
AoA_0deg_ave_q = mean([q q1 q2 q3 q4 q5],2);
AoA_0deg_ave_q = AoA_0deg_ave_q(1:24)

% Defining the bounds for the integration
h = distances(1)*10^-3;                         % in [m]
b= distances(end)*10^-3;                        % in [m]
span = 0.3;                                     % in [m]
chord = 0.15;                                   % in [m]
Area = chord*span;                              % in [m^2]
u1 = nominalTunnelSpeed
There is missing information in the data used to calculate drag and it's coefficient for run 1. Using interpolation, I will fill in the missing information.
% Filling in the missing data
run_1_dynamicPress_interp = interp1(run1_distances,run_1_dynamicPress,distances,'linear')

% Finding u2 for all runs
u2_run1 = sqrt( (2*run_1_dynamicPress_interp)./rho_air );
u2_run2 = sqrt( (2*run2_dynamicPress)./rho_air );
u2_run3 = sqrt( (2*run_3_dynamicPress)./rho_air );

ave_u2 = mean([u2_run1' u2_run2 u2_run3],2);

u2_AoA_0deg = sqrt( (2*AoA_0deg_ave_q)./rho_air );                      % for the 0 deg AoA data 


% Finding the drag for the averaged 0 deg data using the symbolic math toolbox
syms x D(x)
fun = @(x1) rho_air.*u2_AoA_0deg.*(u1 - u2_AoA_0deg).*(distances*10^-3);
Drag_AoA_0deg = integral(fun,h,b,"ArrayValued",true);
     total_AoA_0deg_drag = sum(Drag_AoA_0deg)
C_D_AoA_0deg = mean(Drag_AoA_0deg,2)./ (0.5*rho_air.*u1.^2.*Area);
    AoA_0deg_total_C_D = total_AoA_0deg_drag./ (0.5*rho_air.*u1.^2.*Area)

% Finding the drag for run 1 using the symbolic math toolbox
syms x D(x)
fun = @(x1) rho_air.*u2_run1.*(u1 - u2_run1).*(distances*10^-3);
Drag_run1 = integral(fun,h,b,"ArrayValued",true);
     total_run1_drag = sum(Drag_run1)
C_D_run1 = Drag_run1./ (0.5*rho_air.*u1.^2.*Area);
    run1_total_C_D = total_run1_drag./ (0.5*rho_air.*u1.^2.*Area)
% Finding the drag for run 2 using the symbolic math toolbox
syms x D(x)
fun = @(x) rho_air.*u2_run2.*(u1 - u2_run2).*( (distances')*10^-3 );
Drag_run2 = integral(fun,h,b,"ArrayValued",true);
     total_run2_drag = sum(Drag_run2)
C_D_run2 = Drag_run2./ (0.5*rho_air.*u1.^2.*Area);
    run2_total_C_D = total_run2_drag./ (0.5*rho_air.*u1.^2.*Area)

% Finding the drag for run 3 using the symbolic math toolbox
syms x D(x)
fun = @(x3) rho_air.*u2_run3.*(u1 - u2_run3).*( (distances')*10^-3 );
Drag_run3 = integral(fun,h,b,"ArrayValued",true);
     total_run3_drag = sum(Drag_run3)
C_D_run3 = Drag_run3./ (0.5*rho_air.*u1.^2.*Area);
    run3_total_C_D = total_run3_drag./ (0.5*rho_air.*u1.^2.*Area)
Drags = [Drag_run2'; Drag_run3'];
aveDrags = mean(Drags,1)
CDs = [C_D_run1' C_D_run2 C_D_run3];
aveCD = mean(CDs,2);

Pressures = [run_1_dynamicPress_interp' run2_dynamicPress run_3_dynamicPress];
aveDynamicPressures = mean(Pressures,2);
Task 2.2 Uncertainty analysis of drag coefficient

% sigma_q_div_q = (0.01./run_1_dynamicPress).^2;
% sigma_q_2_div_q_2 = (0.01./run2_dynamicPress).^2;
% sigma_q_3_div_q_3 = (0.01./run_3_dynamicPress).^2;
sigma_s_div_S = (0.0005./Area).^2;
sigma_u1 = (0.01/u1);

sigma_q_div_q_ave = (0.01./aveDynamicPressures).^2;                  % finidng the ratio for the average dynamic pressures

sigma_q_div_q_ave_AoA_0deg = (0.01./AoA_0deg_ave_q).^2;                  % finidng the ratio for the average dynamic pressures at 0deg AoA

% uncertain_1 = C_D_run1.* sqrt(sigma_q_div_q + sigma_s_div_S);
% uncertain_2 = C_D_run2'.* sqrt(sigma_q_2_div_q_2 + sigma_s_div_S);
% uncertain_3 = C_D_run3'.* sqrt(sigma_q_3_div_q_3 + sigma_s_div_S);

ave_uncertainty = aveCD.* sqrt(sigma_q_div_q_ave + sigma_s_div_S);                        % the avergae uncertainty for the 5deg runs

ave_uncertainty_AoA_0deg = C_D_AoA_0deg.* sqrt(sigma_q_div_q_ave_AoA_0deg + sigma_s_div_S);                        % the avergae uncertainty for the 0deg runs

% % For testing
% uncertline0 = C_D_run1 + uncertain_1;               
% uncertline0neg = C_D_run1 - uncertain_1;
% uncertline2 = C_D_run2 + uncertain_2;
% uncertline2neg = C_D_run2 - uncertain_2;
% uncertline3 = C_D_run3 + uncertain_3;
% uncertline3neg = C_D_run3 - uncertain_3;


% For the C_D comparisons
plot(distances,aveCD,'k')
hold on
grid on

plot(dx(1:24),C_D_AoA_0deg,'m')
errorbar(distances,aveCD,ave_uncertainty,'vertical','k')

xlabel('Height (m)')
ylabel('Cd')
title('Cd vs Wind Tunnel Height')

errorbar(dx(1:24),C_D_AoA_0deg,ave_uncertainty_AoA_0deg,'vertical','m-')

legend('Averaged 5 deg','Averaged 0 deg')

hold off

% For the velocity comparisons
plot(distances,ave_u2,'k')
hold on
grid on

plot(dx(1:24),u2_AoA_0deg,'m')

xlabel('Height (m)')
ylabel('Velocity (m/s)')
title('Velocity vs Wind Tunnel Height')

errorbar(distances,ave_u2,sigma_u1,'vertical','k')
errorbar(dx(1:24),u2_AoA_0deg,sigma_u1,'vertical','m')

legend('Averaged 5 deg','Averaged 0 deg')


hold off
