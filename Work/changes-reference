Conversions
inch2m = 1/39.37;
bar2Pa = 100000;
Task 1.1: Theoretical Mach number variation along working section 
Interpolating the wind tunnel liner dimensions
Interpolation is necessary to align the points on both sections of the aerofoil. Later calculations will require consistent, matching point numbering. The values will also be converted to SI units from Imperial units.
topSurface_inches = readtable("Work\aerofoil-surface-dimensions.xlsx","Sheet","Top Surface")
bottomSurface_inches = readtable("Work\aerofoil-surface-dimensions.xlsx",Sheet="Bottom Surface")

topSurfaceArray_inches = table2array(topSurface_inches);
bottomSurfaceArray_inches = table2array(bottomSurface_inches);

% Inerpolating the bottom surface's y-coordinate points relative to the top surface's x-coordinates.
bottom_interp = interp1(bottomSurfaceArray_inches(:,1),bottomSurfaceArray_inches(:,2),topSurfaceArray_inches(:,1),"linear");

% Assembling the completed array, in inches
bottomSurfaceInterp_inches = [topSurfaceArray_inches(:,1) bottom_interp];

% Converting all matrices to S.I. units
bottomSurface = bottomSurfaceInterp_inches*inch2m;
topSurface = topSurfaceArray_inches*inch2m;

% Creating tables
bottomSurafce_table = array2table(bottomSurface);
bottomSurafce_table.Properties.VariableNames = {'x_metres' 'y_metres'};
topSurface_table = array2table(topSurface);
topSurface_table.Properties.VariableNames = {'x_metres' 'y_metres'};
bottomSurafce_table
topSurface_table
Plotting the Coordinates
Before plotting, the values must be corrected to show how they vary along the section. To do this, the centre of the wind tunnel(3 inches of its diameter) will be used as a reference point. The coordinates will then be added or subtracted to the constant 3, in order to show how the section varies. See the plot below for a better understanding of what this means.
% Finding the coordiantes of the top and bottom liners relative to the
% centre of the wind tunnel
bottomSurfacre_ycoord_relative = -3*inch2m + bottomSurface(:,2);
topSurface_ycoord_relative = 3*inch2m - topSurface(:,2);

bottomSurface_relative = [bottomSurface(:,1) bottomSurfacre_ycoord_relative]
topSurface_relative = [topSurface(:,1) topSurface_ycoord_relative]

plot(bottomSurface_relative(:,1),bottomSurface_relative(:,2))
hold on
plot(topSurface_relative(:,1),topSurface_relative(:,2))
legend("Bottom Surface", "Top Surface")
xlabel("Liner x-coordinates (m)")
ylabel("Liner y-coordinates (m)")
yline(3*inch2m)
yline(-3*inch2m)
xlim([0 max(topSurface_relative(:,1))])
hold off
Plotting the variation of the Mach number
To accomplish this, the ratio of the local area to the area at the throat is needed. This ratio shows how the mach number varies through the wind tunnel, as pressure, area and velocity(and by extension mach number) are all related. As pressure increases due to a decrease in area, the velocity of the free stream air must also decrease. With this in mind, we can assume that the velocity - and therefore mach number - is at its lowest when at the throat, and at its highest elsewhere. We can then use this assumption and set the throat as a refenrence point to see how much larger the mach number will be in sections of the wind tunnel with larger areas. In theory, the mach number should not be lower than one, as that would suggest that the throat does not have the smallest area. The  
throatRadius = ( min(topSurface_relative(:,2)) - max(bottomSurface_relative(:,2)) )/2;
throatArea = pi*throatRadius^2

localRadius = ( topSurface_relative(:,2) - bottomSurface_relative(:,2) )./2;
localArea = pi*localRadius.^2

areaRatio = localArea/throatArea;
gamma = 1.4;

% this loop calculates the subsonic theoretical mach numbers of the wind
% tunnel using the newton raphson method
for j = 1:19 % the throat where mach =1  is at position 19
    M(1) = 0.2; % Initial subsonic mach number guess 
    Astar=areaRatio(j);
    for i = 1:1000
        f(i) = Astar.*M(i) - ( ( 1 + ( (gamma - 1)/2 ).*(M(i))^2 )/( (gamma + 1)/2 ) )^( (gamma + 1)/(2*(gamma - 1)) );
        df(i) = Astar - M(i).*( ( 1 + ((gamma - 1)/2).*(M(i))^2 )/( (gamma+1)/2 ) )^( ( (gamma + 1)/(2*(gamma - 1)) )- 1 );
        M_new(j) = M(i) - f(i)./df(i); % Calcuates the new mach number 
        if abs(M_new-M(i)) < 1e-20 % compares the difference in mach number to a specified tolerance 
            break 
        end  
           i=i+1;
           M(i) = M_new(j); % Makes the new mach number the starting point for the next interation 
    end
    j=j+1;
end

% this loop calculates the supersonic theoretical mach numbers of the wind
% tunnel using the newton raphson method
for j = 20:length(areaRatio) % the throat where mach =1  at position 19
    M(1) = 1.8; % Initial guess for supersonic mach number 
    Astar=areaRatio(j);
    for i = 1:1000
        f(i) = Astar.*M(i) - ( ( 1 + ( (gamma - 1)/2 ).*(M(i))^2 )/( (gamma + 1)/2 ) )^( (gamma + 1)/(2*(gamma - 1)) );
        df(i) = Astar - M(i).*( ( 1 + ((gamma - 1)/2).*(M(i))^2 )/( (gamma+1)/2 ) )^( ( (gamma + 1)/(2*(gamma - 1)) )- 1 );
        M_new(j) = M(i) - f(i)./df(i); % Calcuates the new mach number 
        if abs(M_new-M(i)) < 1e-20 % compares the difference in mach number to a specified tolerance 
            break 
        end  
           i=i+1;
           M(i) = M_new(j); % Makes the new mach number the starting point for the next interation 
    end
    j=j+1;
end

plot(bottomSurface(:,1),M_new)
xlabel("Distance along working section(m)")
ylabel("Theoretical Mach Number")
grid on
grid minor

Task 1.2: WT measured pressure ratio and Mach number along working section at two test conditions
The wind tunnel is run at 2 different pressures - 150psi and 75psi- these are the 2 conditions under which the working section is tested. 
Preparing the raw data
The provided data has been given in text format and cannot easily be converted to a readable spreadsheet. To achieve a usable tabular format, the data will need to be split into individual elements and the reassembeled into a usable table/array. The following will be my attempt at accomplishing this using the knowledge from py4e.
% Loading the data into MATLAB
supersonic150_psi = readlines("Work\WT Data for Further Aerodynamics cw\Supersonic Data\Data\supersonic150Psi.txt");
supersonic75_psi = readlines("Work\WT Data for Further Aerodynamics cw\Supersonic Data\Data\supersonick75Psi.txt");
supersonicUncertaintity = readlines("Work\WT Data for Further Aerodynamics cw\Supersonic Data\Data\Uncertainty.txt")
p_atm = 98910;
%% Supersonic data at 150 psi

    % Creating an array to store the number of elements needed to iterate
    % through the data
    x = 1:numel(supersonic150_psi);
    
    % Defining the new array to be assembled
    supersonic150_PSI = zeros(1,28);
    
    % Removing empty cells
    for i = x
        line = supersonic150_psi(i);                    % store each cell as a separate line of text
        if line.startsWith("        data [Bar] ")       % check if the line starts with desired data
            line.strip("left");                         % remove undesired left spacing
            arr = strsplit(line);                       % split the strings
            arr(1) = [];                                % remove the empty cell on at start of line
            arr(1) = [];
            arr(1) = "Pressure";
            str2double( arr(2:end) );
            supersonic150_PSI = vertcat(supersonic150_PSI,arr);             % concatenate with main array
        elseif line.startsWith("data [Bar]")
            arr = strsplit(line);
            arr(1) = [];
            arr(1) = "Pressure";
            str2double( arr(2:end) );
            supersonic150_PSI = vertcat(supersonic150_PSI,arr);
        elseif line.startsWith("Pressure")                                  % generating the header names
            columnNames = strsplit(line,{':',' '},CollapseDelimiters=true);
            columnNames(1) = [];
            columnNames(1) = [];
            columnNames(1) = "Pressure Tap Number";
        end
    end
    
    supersonic150_PSI_tab = array2table(supersonic150_PSI);
    supersonic150_PSI_tab(1,:) = [];
    
    supersonic150_PSI_tab.Properties.VariableNames = columnNames;

%% Supersonic data at 75 psi


    % Creating an array to store the number of elements needed to iterate
    % through the data
    x = 1:numel(supersonic75_psi);
    
    % Defining the new array to be assembled
    supersonic75_PSI = zeros(1,28);
    
    % Removing empty cells
    for i = x
        line = supersonic75_psi(i);                    % store each cell as a separate line of text
        if line.startsWith("        data [Bar] ")       % check if the line starts with desired data
            line.strip("left");                         % remove undesired left spacing
            arr = strsplit(line);                       % split the strings
            arr(1) = [];                                % remove the empty cell on at start of line
            arr(1) = [];
            arr(1) = "Pressure";
            str2double( arr(2:end) );             % converting the pressures from bar to Pa
            supersonic75_PSI = vertcat(supersonic75_PSI,arr);             % concatenate with main array
        elseif line.startsWith("data [Bar]")
            arr = strsplit(line);
            arr(1) = [];
            arr(1) = "Pressure";
            str2double( arr(2:end) );
            supersonic75_PSI = vertcat(supersonic75_PSI,arr);
        elseif line.startsWith("Pressure")                                  % generating the header names
            columnNames = strsplit(line,{':',' '},CollapseDelimiters=true);
            columnNames(1) = [];
            columnNames(1) = [];
            columnNames(1) = "Pressure Tap Number";
        end
    end
    
    supersonic75_PSI_tab = array2table(supersonic75_PSI);
    supersonic75_PSI_tab(1,:) = [];
    
    supersonic75_PSI_tab.Properties.VariableNames = columnNames;

%% Converting from bar to Pa

    supersonic75_PSI_array = str2double( table2array( supersonic75_PSI_tab(:,2:end-1) ) );
    supersonic75_PSI_pascals_array = p_atm + supersonic75_PSI_array(:,2:26).*bar2Pa + 269;              % Absolute pressure at 75 psi working condition
    supersonic75_PSI_ave = mean(supersonic75_PSI_pascals_array);

    supersonic150_PSI_array = str2double( table2array( supersonic150_PSI_tab(:,2:end-1) ) );
    supersonic150_PSI_pascals_array = p_atm + supersonic150_PSI_array*bar2Pa + 269;                     % Absolute pressure at 150 psi working condition
    supersonic150_PSI_ave = mean(supersonic150_PSI_pascals_array);

    % Assembling tables of the converted values
    supersonic150_PSI_pascals_tab = [supersonic150_PSI_tab(:,1)];
    supersonic150_PSI_pascals_tab = horzcat( supersonic150_PSI_pascals_tab,array2table(supersonic150_PSI_pascals_array) );
    % supersonic150_PSI_pascals_tab.Properties.VariableNames = columnNames

    supersonic75_PSI_pascals_tab = [supersonic75_PSI_tab(:,1)];
    supersonic75_PSI_pascals_tab = horzcat( supersonic75_PSI_pascals_tab,array2table(supersonic75_PSI_pascals_array) );
    % supersonic75_PSI_pascals_tab.Properties.VariableNames = columnNames

%% Finding the pressure ratios (P_0/P)
% For the 150psi working condition
pressureRatio_150_plot = [ supersonic150_PSI_ave(:,1)./supersonic150_PSI_ave(:,1) supersonic150_PSI_ave(:,1)./supersonic150_PSI_ave(:,2:26) ];
xaxisValues = 1:26;                                                                                             % the pressure tap numbers
plot(xaxisValues,pressureRatio_150_plot')
grid on
grid minor
title('Pressure variation along working section. Working condition: 150psi')



% % For the 75psi working condition
pressureRatio_75_plot = [ supersonic75_PSI_ave(:,1)./supersonic75_PSI_ave(:,1) supersonic75_PSI_ave(:,1)./supersonic75_PSI_ave(:,2:25) ];
xaxisValues = 1:25;                                                                                             % the pressure tap numbers
plot(xaxisValues,pressureRatio_75_plot')
grid on
grid minor
title('Pressure variation along working section. Working condition: 75psi')
grid on
grid minor
title('Pressure variation along working section. Working condition: 75psi')



%% Finding the mach numbers using the presure ratios
% For the 150psi working condition
mach_150_plot = pressureRatio_150_plot.^0.2857

% For the 75psi working condition
mach_75_plot = sqrt( 2*( (pressureRatio_75_plot).^( (gamma - 1)/gamma ) - 1 )/(gamma-1) )

Task 1.3: Theoretical Mach number at different regimes, shock and expansion fan angles compared with WT measurements
To find the theoretical mach number, the Newton-Raphson method will be used. Following the guidance provided on blackboard, the area ratio and a relationship derived from that formula can be used to 'predict' the mach number

